// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Speaker.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Speaker {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var firstName: String = String()

  public var lastName: String = String()

  public var jobTitle: String = String()

  public var company: String = String()

  public var biography: String = String()

  public var photoURL: String = String()

  public var facebookURL: String = String()

  public var twitterURL: String = String()

  public var linkedinURL: String = String()

  public var websiteURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "beilmo.spectre.dto"

extension Speaker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Speaker"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "first_name"),
    3: .standard(proto: "last_name"),
    4: .standard(proto: "job_title"),
    5: .same(proto: "company"),
    6: .same(proto: "biography"),
    7: .standard(proto: "photo_url"),
    20: .standard(proto: "facebook_url"),
    21: .standard(proto: "twitter_url"),
    22: .standard(proto: "linkedin_url"),
    23: .standard(proto: "website_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularSInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.firstName)
      case 3: try decoder.decodeSingularStringField(value: &self.lastName)
      case 4: try decoder.decodeSingularStringField(value: &self.jobTitle)
      case 5: try decoder.decodeSingularStringField(value: &self.company)
      case 6: try decoder.decodeSingularStringField(value: &self.biography)
      case 7: try decoder.decodeSingularStringField(value: &self.photoURL)
      case 20: try decoder.decodeSingularStringField(value: &self.facebookURL)
      case 21: try decoder.decodeSingularStringField(value: &self.twitterURL)
      case 22: try decoder.decodeSingularStringField(value: &self.linkedinURL)
      case 23: try decoder.decodeSingularStringField(value: &self.websiteURL)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularSInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.firstName.isEmpty {
      try visitor.visitSingularStringField(value: self.firstName, fieldNumber: 2)
    }
    if !self.lastName.isEmpty {
      try visitor.visitSingularStringField(value: self.lastName, fieldNumber: 3)
    }
    if !self.jobTitle.isEmpty {
      try visitor.visitSingularStringField(value: self.jobTitle, fieldNumber: 4)
    }
    if !self.company.isEmpty {
      try visitor.visitSingularStringField(value: self.company, fieldNumber: 5)
    }
    if !self.biography.isEmpty {
      try visitor.visitSingularStringField(value: self.biography, fieldNumber: 6)
    }
    if !self.photoURL.isEmpty {
      try visitor.visitSingularStringField(value: self.photoURL, fieldNumber: 7)
    }
    if !self.facebookURL.isEmpty {
      try visitor.visitSingularStringField(value: self.facebookURL, fieldNumber: 20)
    }
    if !self.twitterURL.isEmpty {
      try visitor.visitSingularStringField(value: self.twitterURL, fieldNumber: 21)
    }
    if !self.linkedinURL.isEmpty {
      try visitor.visitSingularStringField(value: self.linkedinURL, fieldNumber: 22)
    }
    if !self.websiteURL.isEmpty {
      try visitor.visitSingularStringField(value: self.websiteURL, fieldNumber: 23)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Speaker, rhs: Speaker) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.firstName != rhs.firstName {return false}
    if lhs.lastName != rhs.lastName {return false}
    if lhs.jobTitle != rhs.jobTitle {return false}
    if lhs.company != rhs.company {return false}
    if lhs.biography != rhs.biography {return false}
    if lhs.photoURL != rhs.photoURL {return false}
    if lhs.facebookURL != rhs.facebookURL {return false}
    if lhs.twitterURL != rhs.twitterURL {return false}
    if lhs.linkedinURL != rhs.linkedinURL {return false}
    if lhs.websiteURL != rhs.websiteURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
